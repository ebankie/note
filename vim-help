vim 常用使用方法总结
02. 十二/技术文章 /没有评论
一，常用快捷键

vim 代码缩进 =G  #也可以选中之后直接 “=”
vim 删除一关键字 dw
vim 编辑行尾 A /shift +a
vim 编辑词尾 e
vim 删除一行 shift+d
vim 选择行 v 下 shift + v
vim 选择 v下 v
vim 编辑模式 a /e
vim 全部删除 v下 1,d / gg +d+G (d可以为行号)
vim 自动匹配关键字 ctrl+n /p
vim 跳到行首，shift +i
vim 查找 v 下 /查找关键字 n 往下找，N 往上找
vim 选重 v为可视模式,可以选定多行。选定多行之后，可以用yy或者dd等等进行拷贝和剪切。
p 是粘贴 一般y就可以拷贝了 #yy也可以的哈
插入空行
o 在当前行下一行插入空行
O 在当前行上一行插入空行

h, j, k, l对应方向左, 下, 上, 右.

w
将光标向前移动一个词.

b
将光标向后移动一个词.

二，常见文件操作

vim buffer多文件 ctrl+z 退出当前文件 jobs 查看当前有多少工作文件 fg +1 编辑第一个文件

(1)打开文件
vi flname1 flname2… flnameN
将多个文件调入缓冲，是 argument list。

vim -o file1 file2 　#上下窗口打开多个文件
vim -O file1 file2　#左右窗口打开多个文件

<C-W> = ctrl+w
:split 文件名 同时在一个页面显示多个文件的内容,类似多窗口,用<C-W><C-W>切换当前窗口
<C-W>f 切分显示光标在处的文件名，VIM 会在 path 中搜索该文件名，比如常用它打开 #include 语句中的文件
<C-W>_ 当同时打开几个文件时，按 <C-W>_ 使当前窗口最大化
用Ctrl-W命令指定光标移动：
Ctrl-W + 扩大窗口
Ctrl-W – 缩小窗口
Ctrl-W h 移动到窗口左边
Ctrl-W j 移动到窗口下边
Ctrl-W k 移动到窗口上边
Ctrl-W l 移动到窗口右边
等于是<C-W>按下后,松开键盘,再按下一个命令就可以了.
如果要关闭分割窗口可以用:close，剩下只有一个窗口的话就不能关了。
多窗口是split，像用e打开多个文件是将文件放在缓冲区中。
:e filename
这是在进入 vim 后，在不离开 vim 的情形下再开其它文件，只要您要编辑的档案是在目前目录，Tab 补全键还是可以使用。是buffer list。
注意：:e 或者:new 或者:split 后边可以跟目录,这样就可以在目录下慢慢找要打开的文件了

(2)缓冲区跳转
:n 编辑下一个文件。
:2n 编辑下二个文件。
:N 编辑前一个文件。注意，这种用法只能用于 argument list 的情形。
:rew 回到首文件
:args 查看当前编辑缓冲文件状态
:e# 或 Ctrl-^ 编辑前一个档案，用于两文件互相编辑时相当好用。这种用法不管是 argument list 或buffer list 档案间皆可使用。 使用Ctrl－^ 命令更便捷，但如终端类型不正确该功能将无效。
用:ls来显示缓冲区中的文件，编号后边有#的代表是前一个文件，可以通过:e#来进入，有%a的代表是当前文件，什么也没有的可以通过:bn来进入，这里的n代表文件编号。
:b文件名或编号 移至该文件。
在 :ls 中就会出示各文件的编号，这个编号在未离开 vim 前是不会变的。这个指令 elvis 也是可以使用。当然 :e#编号 也是可以的，这样的用法则是所有 vi clone 都通用了。
在 buffers 中，减号 – 表示这个 buffer 并未载入，不过，不必担心，载入相当快速的。加号 + 表示这个 buffer 已经修改过了。
:bn buffer next。这里的n代表字母n
:bl buffer last。
以上两个指令 elvis 不适用。
如果您是使用 vim 的 GUI，那就在菜单上就会有 Buffers 这个选项，可以很容易的知道及移动各buffer 间。

(3)移除缓冲区
:bd(elete) buffer 在未离开 vim 前是不会移除的，可使用这个指令移除。其实移除它干什么呢？vim是您在叫用时才会载入的，因此这些 buffers 并不是像 cache 一般要占内存的。

三，编辑命令

１，重新编辑
放弃一修改过的文件，重新编辑。
(1)使用命令　:q!强行退出后再vi flname重新进入。
(2)使用命令　:e!强行重编辑更便捷。这样也是会打开文件，但会放弃目前编辑文件的改变，否则如果文件已有变动，vim 预设是不让您随便离开的。:e! 后不接什么的话，代表舍弃一切修改，重新载入编辑中文件。

:files 或 :buffers 或 :ls 会列出目前 buffer 中的所有文件。
在 elvis 中可使用 :b 来叫出 buffers。
:f 或 Ctrl-g 显示目前编辑的文件名、是否经过修改及目前光标所在之位置。
:f 文件名 改变编辑中的文件名。(file)
:r 文件名 在光标所在处插入一个文件的内容。(read)
:35 r 文件名 将文件插入至 35 行之后。
gf 这是 vim 的特殊打开文件的方法，会打开光标所在处的 word 为名的文件，当然，这个文件要在当前目录内，否则会创建新文件。

２， 查找替换命令

用/查找单词后,n可以跳到下一个,N则是上一个,:nohls可以取消高亮
查找时,:set ignorecase”项让VIM忽略大小写，“:set noignorecase” 来关闭这项功能。
:n,n+ms/查找字符/替换字符/g  #从n行开始到m行结束

:n,$s/查找字符/替换字符/g　或者　:,$s/查找字符/替换字符/g　#从n或从头　行开发到最后
３. 修改文字

cw:删除一个单词并进入插入模式,cc:删除一行并进入插入模式。
r:然后输入的字母将替换当前字母并保持命令模式,R则是不停的替换(一个挨着一个)。
0到行首,$到行尾。
gg:跳到文件头

sgift + g : 跳到文件尾
４，函数间跳转

ctrl+]和ctrl+T分别是查找函数的定义和返回,好像需要ctag的支持
<C-W>i 跳转到光标所指标识符的定义行,是打开一个新的小窗口显示,记住要加个i,最好是找自己项目下的文件,否则找库函数的话还不如man.
大写 K 看光标所指标识符的 man 帮助页

５. 自动完成
i<Ctrl-P> 向上搜索，补全一个词
i<Ctrl-N> 向下搜索，补全一个词 #编辑态时为补全
i<C-X><C-L> 补全一行。
比如你写过一行 for (int i = 0; i < 100; i++)，你想再写一模一样的一行，只要输入 for<C-X><C-L>即可。如果补全出来的不是你想要的那一行，你可以按 <C-P> 或 <C-N> 选择上一个或下一个匹配行i<C-X><C-F> 在文件系统中搜索，补全一个文件名
如果按 <C-P> 或 <C-N> 补全一个词，在当前文件中没有找到匹配，VIM 将搜索 #include 语句中的文件，而文件的位置将在 path 中搜索。
i<C-Y> 把上一行对应列的字符抄下来
i<C-E> 把下一行对应列的字符抄上来,这两个都可以一直按下去,到了行尾自己会停的.

６. 注释整块内容

注释块的方法:
<Ctrl+v> 选定要注释掉的行 shift +i 或　I //　 Esc　后完成
I之后输入的东西就是插入到选定的行前边的,直至Esc.
要去掉注释的办法:<Ctrl+v>选定注释符光标选择列数　//,然后d
列块选定后I是在前边都插入,A是在后边都插入
<Ctrl+v>是按列块模式的选定,<shift+v>是行选定,v是普通选定

7. 其他命令

u可以撤销上一步操作, ctrl+r可以恢复
i<C-O>命令执行一个普通模式的命令，执行完毕后回到插入模式，不用多次Esc
i<C-V>后续字符 输入特殊的 ASCII 字符或键。
. 在光标当前位置处重复上一次操作
:!命令行 执行一条外部命令

收集几个linux 监控命令，虽然以前写过监控脚本

iostat,mpstat,vmstat,netstat ,top,killall ,kill 　写监控脚本是使用的/proc/ 下文件

 

//好东西，统计文件IP TOP5:

netstat -ntu | tail -n +3 | awk ‘{ print $5}’ | cut -d : -f 1 | sort | uniq -c| sort -n -r | head -n 5
tail -n +3 :去掉上面用红色标明的两行。
awk ‘{ print $5}’：取数据的低5域（第5列），上面蓝色标明。
cut -d : -f 1 ：取蓝色部分前面的IP部分。
sort：对IP部分进行排序。
uniq -c：打印每一重复行出现的次数。（并去掉重复行）
sort -n -r：按照重复行出现的次序倒序排列。
head -n 5：取排在前5位的I
awk ‘{ print $2}’ she2.log | sort | uniq -c| sort -n -r | head -n 5

批量替换多个文件中的字串。命令如下：

grep jnh.dayitea.com -rl  ./*  | xargs sed -i “s/jnh.dayitea.com/www.taeteacarnival.com/g”

 

二、sed 使用小结

-n ：使用安静(silent)模式。在一般 sed 的用法中，所有来自 STDIN 的数据一般都会被列出到终端上。但如果加上 -n 参数后，则只有经过sed 特殊处理的那一行(或者动作)才会被列出来。
-e ：直接在命令列模式上进行 sed 的动作编辑；
-f ：直接将 sed 的动作写在一个文件内， -f filename 则可以运行 filename 内的 sed 动作；
-r ：sed 的动作支持的是延伸型正规表示法的语法。(默认是基础正规表示法语法)
-i ：直接修改读取的文件内容，而不是输出到终端。

动作说明： [n1[,n2]]function
n1, n2 ：不见得会存在，一般代表『选择进行动作的行数』，举例来说，如果我的动作是需要在 10 到 20 行之间进行的，则『 10,20[动作行为] 』

function：
a ：新增， a 的后面可以接字串，而这些字串会在新的一行出现(目前的下一行)～
c ：取代， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行！
d ：删除，因为是删除啊，所以 d 后面通常不接任何咚咚；
i ：插入， i 的后面可以接字串，而这些字串会在新的一行出现(目前的上一行)；
p ：列印，亦即将某个选择的数据印出。通常 p 会与参数 sed -n 一起运行～
s ：取代，可以直接进行取代的工作哩！通常这个 s 的动作可以搭配正规表示法！例如 1,20s/old/new/g 就是啦！

eg:
ifconfig | awk '/net addr/{print $1,$2}' | sed  -n '1,1p'
以行为单位的新增/删除
将 /etc/passwd 的内容列出并且列印行号，同时，请将第 2~5 行删除！

[root@www ~]# nl /etc/passwd | sed '2,5d'
1 root:x:0:0:root:/root:/bin/bash
6 sync:x:5:0:sync:/sbin:/bin/sync
7 shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown
.....(后面省略).....
sed 的动作为 ’2,5d’ ，那个 d 就是删除！因为 2-5 行给他删除了，所以显示的数据就没有 2-5 行罗～ 另外，注意一下，原本应该是要下达 sed -e 才对，没有 -e 也行啦！同时也要注意的是， sed 后面接的动作，请务必以 ” 两个单引号括住喔！

只要删除第 2 行

nl /etc/passwd | sed '2d'
 

要删除第 3 到最后一行

 nl /etc/passwd | sed '3,$d'
 

在第二行后(亦即是加在第三行)加上『drink tea?』字样！

[root@www ~]# nl /etc/passwd | sed '2a drink tea'
1 root:x:0:0:root:/root:/bin/bash
2 bin:x:1:1:bin:/bin:/sbin/nologin
drink tea
3 daemon:x:2:2:daemon:/sbin:/sbin/nologin
.....(后面省略).....
 

那如果是要在第二行前

 nl /etc/passwd | sed '2i drink tea'
 

如果是要增加两行以上，在第二行后面加入两行字，例如『Drink tea or …..』与『drink beer?』

复制代码
[root@www ~]# nl /etc/passwd | sed '2a Drink tea or ......\
> drink beer ?'
1 root:x:0:0:root:/root:/bin/bash
2 bin:x:1:1:bin:/bin:/sbin/nologin
Drink tea or ......
drink beer ?
3 daemon:x:2:2:daemon:/sbin:/sbin/nologin
.....(后面省略).....
复制代码
每一行之间都必须要以反斜杠『 \ 』来进行新行的添加喔！所以，上面的例子中，我们可以发现在第一行的最后面就有 \ 存在。

以行为单位的替换与显示
将第2-5行的内容取代成为『No 2-5 number』呢？

[root@www ~]# nl /etc/passwd | sed '2,5c No 2-5 number'
1 root:x:0:0:root:/root:/bin/bash
No 2-5 number
6 sync:x:5:0:sync:/sbin:/bin/sync
.....(后面省略).....
透过这个方法我们就能够将数据整行取代了！

 

仅列出 /etc/passwd 文件内的第 5-7 行

[root@www ~]# nl /etc/passwd | sed -n '5,7p'
5 lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin
6 sync:x:5:0:sync:/sbin:/bin/sync
7 shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown
可以透过这个 sed 的以行为单位的显示功能， 就能够将某一个文件内的某些行号选择出来显示。

数据的搜寻并显示
搜索 /etc/passwd有root关键字的行

复制代码
nl /etc/passwd | sed '/root/p'
1  root:x:0:0:root:/root:/bin/bash
1  root:x:0:0:root:/root:/bin/bash
2  daemon:x:1:1:daemon:/usr/sbin:/bin/sh
3  bin:x:2:2:bin:/bin:/bin/sh
4  sys:x:3:3:sys:/dev:/bin/sh
5  sync:x:4:65534:sync:/bin:/bin/sync
....下面忽略
复制代码
如果root找到，除了输出所有行，还会输出匹配行。

 

使用-n的时候将只打印包含模板的行。

nl /etc/passwd | sed -n '/root/p'
1  root:x:0:0:root:/root:/bin/bash
 

数据的搜寻并删除
删除/etc/passwd所有包含root的行，其他行输出

nl /etc/passwd | sed  '/root/d'
2  daemon:x:1:1:daemon:/usr/sbin:/bin/sh
3  bin:x:2:2:bin:/bin:/bin/sh
....下面忽略
#第一行的匹配root已经删除了
 

 

 

数据的搜寻并执行命令
找到匹配模式eastern的行后，

搜索/etc/passwd,找到root对应的行，执行后面花括号中的一组命令，每个命令之间用分号分隔，这里把bash替换为blueshell，再输出这行：

 nl /etc/passwd | sed -n '/root/{s/bash/blueshell/;p}'
 1  root:x:0:0:root:/root:/bin/blueshell
如果只替换/etc/passwd的第一个bash关键字为blueshell，就退出

nl /etc/passwd | sed -n '/bash/{s/bash/blueshell/;p;q}'    
1  root:x:0:0:root:/root:/bin/blueshell
最后的q是退出。

 

数据的搜寻并替换
除了整行的处理模式之外， sed 还可以用行为单位进行部分数据的搜寻并取代。基本上 sed 的搜寻与替代的与 vi 相当的类似！他有点像这样：

sed 's/要被取代的字串/新的字串/g'
 

先观察原始信息，利用 /sbin/ifconfig 查询 IP

[root@www ~]# /sbin/ifconfig eth0
eth0 Link encap:Ethernet HWaddr 00:90:CC:A6:34:84
inet addr:192.168.1.100 Bcast:192.168.1.255 Mask:255.255.255.0
inet6 addr: fe80::290:ccff:fea6:3484/64 Scope:Link
UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1
.....(以下省略).....
本机的ip是192.168.1.100。

 

将 IP 前面的部分予以删除

[root@www ~]# /sbin/ifconfig eth0 | grep 'inet addr' | sed 's/^.*addr://g'
192.168.1.100 Bcast:192.168.1.255 Mask:255.255.255.0
接下来则是删除后续的部分，亦即： 192.168.1.100 Bcast:192.168.1.255 Mask:255.255.255.0

将 IP 后面的部分予以删除

[root@www ~]# /sbin/ifconfig eth0 | grep 'inet addr' | sed 's/^.*addr://g' | sed 's/Bcast.*$//g'
192.168.1.100
 

多点编辑
一条sed命令，删除/etc/passwd第三行到末尾的数据，并把bash替换为blueshell

nl /etc/passwd | sed -e '3,$d' -e 's/bash/blueshell/'
1  root:x:0:0:root:/root:/bin/blueshell
2  daemon:x:1:1:daemon:/usr/sbin:/bin/sh
-e表示多点编辑，第一个编辑命令删除/etc/passwd第三行到末尾的数据，第二条命令搜索bash替换为blueshell。

 

 

直接修改文件内容(危险动作)
sed 可以直接修改文件的内容，不必使用管道命令或数据流重导向！ 不过，由於这个动作会直接修改到原始的文件，所以请你千万不要随便拿系统配置来测试！ 我们还是使用下载的 regular_express.txt 文件来测试看看吧！

利用 sed 将 regular_express.txt 内每一行结尾若为 . 则换成 !

[root@www ~]# sed -i 's/\.$/\!/g' regular_express.txt
 

利用 sed 直接在 regular_express.txt 最后一行加入『# This is a test』

[root@www ~]# sed -i '$a # This is a test' regular_express.txt
由於 $ 代表的是最后一行，而 a 的动作是新增，因此该文件最后新增『# This is a test』！

sed 的『 -i 』选项可以直接修改文件内容，这功能非常有帮助！举例来说，如果你有一个 100 万行的文件，你要在第 100 行加某些文字，此时使用 vim 可能会疯掉！因为文件太大了！那怎办？就利用 sed 啊！透过 sed 直接修改/取代的功能，你甚至不需要使用 vim 去修订！
